#=================================================
# https://github.com/P3TERX/Actions-OpenWrt
# Description: Build OpenWrt using GitHub Actions
# License: MIT
# Author: P3TERX
# Blog: https://p3terx.com
#=================================================

name: 3. hanwckf-ax6000-每周构建

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH connection to Actions'
        required: false
        default: 'false'
  schedule:
    - cron: 0 3 * * 1
  push:
    branches: [ main ]

env:
  REPO_AUTHOR: hanwckf
  REPO_NAME: immortalwrt-mt798x
  REPO_URL: https://github.com/hanwckf/immortalwrt-mt798x
  REPO_BRANCH: openwrt-21.02
  DEVICE_SHORT_NAME: ax6000
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: ax6000/ax6000.config
  DIY_P1_SH: ax6000/diy-part1.sh
  DIY_P2_SH: ax6000/diy-part2.sh
  DIY_P3_SH: ax6000/diy-part3.sh
  SSH_ACTIONS: false
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai
  NEED_CLEANUP: true
  NEED_CLONE: false

jobs:
  build:
    runs-on: ubuntu-20.04
    steps:

    - name: 定义代码根路径
      run: |
        echo "SOURCE_ROOT=${{env.REPO_AUTHOR}}_${{env.REPO_NAME}}" >> $GITHUB_ENV

##########################################################################
    - name: 清理编译残存
      env:
        DEBIAN_FRONTEND: noninteractive
      if: env.NEED_CLEANUP == 'true'
      run: |
          sudo chown $USER:$GROUPS /workdir
          cd /workdir/${{env.SOURCE_ROOT}}
          git checkout feeds.conf.default || true
          git checkout include/image.mk || true
          rm -rf dl/go-mod-cache/
          rm -rf /workdir/dl/go-mod-cache/
          rm -rf files
          rm -rf .config
          rm -rf  bin/targets/mediatek/mt7986/*.bin
          rm -rf package/mosdns
          rm -rf package/v2ray-geodata
          rm -rf package/luci-app-ddns-go
          rm -rf package/lucky
          rm -rf package/cloudflared
          rm -rf package/luci-app-mosdns
          rm -rf package/luci-app-alist
          rm -rf package/openwrt-adguardhome/
          rm -rf package/z_*
          rm -rf package/mycustom/openwrt-upx
          git checkout package || true
##########################################################################

    - name: 设定时区
      uses: zcong1993/setup-timezone@master
      with:
        timezone: "Asia/Shanghai"

    - name: 检出项目分支
      uses: actions/checkout@main
      with:
        ref: hanwckf

    - name: 安装编译环境
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install $(curl -fsSL https://tinyurl.com/depends-ubuntu-2004) || true
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir

    - name: 自定义go路径
      run: |
        [ ! -e /workdir/go ]  && wget -qO- https://go.dev/dl/go1.19.4.linux-amd64.tar.gz | tar -zxC /workdir/ || true

    - name: 下载固件源码
      working-directory: /workdir
      if: env.NEED_CLONE == 'true'
      run: |
        df -hT $PWD
        git clone -b $REPO_BRANCH --single-branch --depth 1 $REPO_URL  /workdir/${{env.SOURCE_ROOT}}
        ln -sf /workdir/${{env.SOURCE_ROOT}} /workdir/openwrt

    - name: 自定义软件源(DIY_P1)
      run: |
        ln -sf /workdir/${{env.SOURCE_ROOT}} $GITHUB_WORKSPACE/openwrt
        [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
        chmod +x $DIY_P1_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P1_SH

    - name: 自定义源代码(DIY_P2)
      run: |
        [ -e files ] && mv files openwrt/files
        chmod a+x openwrt/files/etc/init.d/disable-ipv6.sh
        chmod +x $DIY_P2_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P2_SH

    - name: SSH链接管理
      uses: P3TERX/ssh2actions@v1.0.0
      if: false

    - name: 下载插件
      run: cd openwrt && ./scripts/feeds update -a

    - name: 读取插件
      run: cd openwrt && ./scripts/feeds install -a

    - name: 生成编译配置
      run: |
        cd openwrt
        cat defconfig/mt7986-ax6000.config >> .config
        cd $GITHUB_WORKSPACE
        [ -e $CONFIG_FILE ] && cat $CONFIG_FILE >> $GITHUB_WORKSPACE/openwrt/.config
        cd openwrt
        cat .config
        make defconfig

    - name: 下载软件包
      id: package
      run: |
        [ ! -e openwrt/dl/ ] && mkdir openwrt/dl
        [ -e dl ] && cp -rf dl/* openwrt/dl/
        [ -e /workdir/dl ] && cp -rf /workdir/dl/* openwrt/dl/
        cd openwrt
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;
      if: true

    - name: 针对特定软件的自定义设置(DIY_P3)
      run: |
        chmod +x $DIY_P3_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P3_SH

    - name: 开始编译固件
      id: compile
      run: |
        cd openwrt
        echo -e "$(nproc) thread compile"
        make -j$(nproc) ||make -j2 || make -j1 V=s
        echo "{compile_status}={success}" >> $GITHUB_OUTPUT
        echo "FILE_TIME=$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV
        echo "FILE_DATE=$(date +"%Y%m%d")" >> $GITHUB_ENV

    - name: 查看磁盘使用情况
      if: (!cancelled())
      run: df -hT

    - name: 查看目录
      if: |
      run: ls -al openwrt/bin/targets/*/* || true

    - name: 上传bin压缩目录
      uses: actions/upload-artifact@main
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      with:
        name: OpenWrt_bin${{ env.DEVICE_SHORT_NAME }}${{ env.FILE_DATE }}
        path: openwrt/bin/packages/aarch64_cortex-a53

    - name: 整理编译好的固件
      id: organize
      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        cd openwrt/bin/targets/*/*
        rm -rf packages && mkdir packages
        find -name "*esxi-flat.vmdk*" | xargs -i mv -f {} packages
        find -name "*kernel.bin*" | xargs -i mv -f {} packages
        find -name "*rootfs*" | xargs -i mv -f {} packages
        find -name "*.manifest*" | xargs -i mv -f {} packages
        find -name "*vmlinuz*" | xargs -i mv -f {} packages
        find -name "*esxi.vmdk*" | xargs -i mv -f {} packages
        rm -rf packages
        (for var in *.bin; do mv "$var" "${var%.bin}-$(cat version.buildinfo | cut -d '-' -f2).bin"; done) ||true
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "{status}={success}" >> $GITHUB_OUTPUT

    - name: 上传固件到github action
      uses: actions/upload-artifact@main
      if: ${{env.STATE.compile_status}} == 'success' && !cancelled()
      with:
        name: ${{env.REPO_AUTHOR}}-${{env.REPO_NAME}}-${{env.REPO_BRANCH}}-${{ env.DEVICE_SHORT_NAME }}-${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE}}

    - name: 创建release标签
      id: tag
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      run: |
        echo "release_tag=$(date +"%Y.%m.%d-%H%M")" >> $GITHUB_ENV
        echo "{tag.status}={success}" >> $GITHUB_OUTPUT

    - name: 发布至release
      uses: softprops/action-gh-release@v1
      if: ${{env.STATE.tag_status}} == 'success' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
      with:
        name: 「${{env.FILE_DATE}}」-「${{env.REPO_AUTHOR}}-${{env.REPO_NAME}}-${{env.REPO_BRANCH}}-${{env.DEVICE_SHORT_NAME}}」
        tag_name: ${{env.release_tag}}
        body_path: release.md
        files: |
          ${{ env.FIRMWARE }}/*

    - name: 查看目录
      if: |
      run: ls -al openwrt/bin/targets/*/* || true

    - name: 删除旧的Releases
      uses: JAM2199562/delete-older-releases@v0.2.0
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      with:
        keep_latest: 99
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}

    - name: 清理 workflow runs
      uses: Mattraks/delete-workflow-runs@v2
      with:
        retain_days: 99
        keep_minimum_runs: 99
