#=================================================
# https://github.com/P3TERX/Actions-OpenWrt
# Description: Build OpenWrt using GitHub Actions
# Lisence: MIT
# Author: P3TERX
# Blog: https://p3terx.com
#=================================================

name: 调试专用

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH connection to Actions'
        required: false
        default: 'false'
  # schedule:
  #   - cron: 0 6 * * *
  push:
    branches: [ main ]

env:
  REPO_AUTHOR: hanwckf
  REPO_NAME: immortalwrt-mt798x
  REPO_URL: https://github.com/hanwckf/immortalwrt-mt798x
  REPO_BRANCH: openwrt-21.02
  DEVICE_SHORT_NAME: 360t7
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: 360t7/360t7.config
  DIY_P1_SH: 360t7/diy-part1.sh
  DIY_P2_SH: 360t7/diy-part2.sh
  SSH_ACTIONS: false
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-20.04
    steps:
    - name: 定义代码根路径
      run: |
        echo "SOURCE_ROOT=${{env.REPO_AUTHOR}}_${{env.REPO_NAME}}" >> $GITHUB_ENV

    - name: 设定时区
      uses: zcong1993/setup-timezone@master
      with:
        timezone: "Asia/Shanghai"

    - name: 检出项目分支
      uses: actions/checkout@main
      with:
        ref: hanwckf

    # - name: 安装编译环境
    #   env:
    #     DEBIAN_FRONTEND: noninteractive
    #   run: |
    #     sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
    #     sudo -E apt-get -qq update
    #     sudo -E apt-get -qq install $(curl -fsSL https://tinyurl.com/depends-ubuntu-2004)
    #     sudo -E apt-get -qq autoremove --purge
    #     sudo -E apt-get -qq clean
    #     sudo timedatectl set-timezone "$TZ"
    #     sudo mkdir -p /workdir
    #     sudo chown $USER:$GROUPS /workdir

    # - name: 下载固件源码
    #   working-directory: /workdir
    #   run: |
    #     df -hT $PWD
    #     git clone -b $REPO_BRANCH --single-branch --depth 1 $REPO_URL  /workdir/${{env.SOURCE_ROOT}}
    #     ln -sf /workdir/${{env.SOURCE_ROOT}} $GITHUB_WORKSPACE/openwrt

##########################################################################
    # - name: 清理编译残存
    #   env:
    #     DEBIAN_FRONTEND: noninteractive
    #   run: |
    #       cd /workdir/hanwckf_immortalwrt-mt798x
    #       git checkout feeds.conf.default
    #       git checkout include/image.mk
    #       rm -rf dl/go-mod-cache/
    #       rm -rf files
    #       rm -rf .config
##########################################################################

    # - name: 下载插件
    #   run: cd openwrt && ./scripts/feeds update -a

    # - name: 读取插件
    #   run: cd openwrt && ./scripts/feeds install -a

    # - name: 自定义软件源
    #   run: |
    #     [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
    #     chmod +x $DIY_P1_SH
    #     cd openwrt
    #     $GITHUB_WORKSPACE/$DIY_P1_SH

    # - name: 更改固件设置
    #   run: |
    #     [ -e files ] && mv files openwrt/files
    #     chmod a+x openwrt/files/etc/init.d/disable-ipv6.sh
    #     chmod +x $DIY_P2_SH
    #     cd openwrt
    #     $GITHUB_WORKSPACE/$DIY_P2_SH

    # - name: 更新配置
    #   run: |
    #     [ -e $CONFIG_FILE ] && cat $CONFIG_FILE >> openwrt/.config
    #     cd openwrt
    #     cat defconfig/mt7981-ax3000.config >> .config
    #     make defconfig

    # - name: 下载安装包
    #   id: package
    #   run: |
    #     cd openwrt
    #     make defconfig
    #     make download -j8
    #     [ -e /workdir/dl ] && mv /workdir/dl/ dl/
    #     find dl -size -1024c -exec ls -l {} \;
    #     find dl -size -1024c -exec rm -f {} \;
    #   if: true

    # - name: 开始编译固件
    #   id: compile
    #   run: |
    #     cd openwrt
    #     echo -e "$(nproc) thread compile"
    #     make -j$(nproc) ||make -j2 || make -j1 V=s
    #     echo "::set-output name=status::success"
    #     # grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
    #     # [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
    #     echo "FILE_TIME=$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV
    #     echo "FILE_DATE=$(date +"%Y%m%d")" >> $GITHUB_ENV

    # - name: 查看磁盘使用情况
    #   if: (!cancelled())
    #   run: df -hT

    # - name: 查看目录
    #   if: |
    #   run: ls -al openwrt/bin/targets/*/* || true

    # - name: 上传bin压缩目录
    #   uses: actions/upload-artifact@main
    #   if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
    #   with:
    #     name: OpenWrt_bin${{ env.DEVICE_SHORT_NAME }}${{ env.FILE_DATE }}
    #     path: openwrt/bin/packages/aarch64_cortex-a53

    # - name: 整理编译好的固件
    #   id: organize
    #   if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
    #   run: |
    #     cd openwrt/bin/targets/*/*
    #     rm -rf packages && mkdir packages
    #     find -name "*esxi-flat.vmdk*" | xargs -i mv -f {} packages
    #     find -name "*kernel.bin*" | xargs -i mv -f {} packages
    #     find -name "*rootfs*" | xargs -i mv -f {} packages
    #     find -name "*.manifest*" | xargs -i mv -f {} packages
    #     find -name "*vmlinuz*" | xargs -i mv -f {} packages
    #     find -name "*esxi.vmdk*" | xargs -i mv -f {} packages
    #     rm -rf packages
    #     (for var in *.bin; do mv "$var" "${var%.bin}-$(cat version.buildinfo | cut -d '-' -f2).bin"; done) ||true
    #     echo "FIRMWARE=$PWD" >> $GITHUB_ENV
    #     echo "::set-output name=status::success"

    # - name: 上传固件到github action
    #   uses: actions/upload-artifact@main
    #   if: steps.compile.outputs.status == 'success' && !cancelled()
    #   with:
    #     name: ${{env.REPO_AUTHOR}}-${{env.REPO_NAME}}-${{env.REPO_BRANCH}}-${{ env.DEVICE_SHORT_NAME }}-${{ env.FILE_DATE }}
    #     path: ${{ env.FIRMWARE}}

    # - name: 创建release标签
    #   id: tag
    #   if: env.UPLOAD_RELEASE == 'true' && !cancelled()
    #   run: |
    #     echo "::set-output name=release_tag::$(date +"%Y.%m.%d-%H%M")"
    #     echo "::set-output name=status::success"

    # - name: 发布至release
    #   uses: softprops/action-gh-release@v1
    #   if: steps.compile.outputs.status == 'success' && !cancelled()
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
    #   with:
    #     name: 「${{env.FILE_DATE}}」-「${{env.REPO_AUTHOR}}-${{env.REPO_NAME}}-${{env.REPO_BRANCH}}-${{env.DEVICE_SHORT_NAME}}」
    #     tag_name: ${{ steps.tag.outputs.release_tag }}
    #     body_path: release.md
    #     files: |
    #       ${{ env.FIRMWARE }}/*

    # - name: 查看目录
    #   if: |
    #   run: ls -al openwrt/bin/targets/*/* || true

    - name: 删除旧的Releases
      uses: JAM2199562/delete-older-releases@v0.2.0
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      with:
        keep_latest: 30
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}

    - name: 清理 workflow runs
      uses: Mattraks/delete-workflow-runs@v2
      with:
        retain_days: 1
        keep_minimum_runs: 1


